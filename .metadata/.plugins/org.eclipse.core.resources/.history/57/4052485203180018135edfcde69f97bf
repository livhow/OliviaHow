//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class -
//Lab  -

import static java.lang.System.*;

public class RomanNumeral
{
	private Integer number;
	private String roman;

	private final static int[] NUMBERS= {1000,900,500,400,100,90,
													50,40,10,9,5,4,1};

	private final static String[] LETTERS = {"M","CM","D","CD","C","XC",
												  "L","XL","X","IX","V","IV","I"};

	public RomanNumeral(String str)
	{
		setRoman(str);
	}

	public RomanNumeral(Integer orig)
	{
		setNumber(orig);
	}

	public void setNumber(Integer num)
	{
		number = num;
	}

	public void setRoman(String rom)
	{
		roman = rom;
	}

	public Integer getNumber()
	{
		number = 0;
		int lastNumber = 0;
		for (int i = 0;i <= roman.length(); i++)
		 {
			if (roman.contains("M"))
			{
				number = checkNumber(1000, lastNumber, number);
				lastNumber = 1000;
				break;
			}
			if (roman.contains("D"))
			{
				number = checkNumber(500, lastNumber, number);
				lastNumber = 500;
				break;
			}
			if (roman.contains("C"))
			{
				number = checkNumber(100, lastNumber, number);
				lastNumber = 100;
				break;
			}
			if (roman.contains("L"))
			{
				number = checkNumber(50, lastNumber, number);
				lastNumber = 50;
				break;
			}
			if (roman.contains("X"))
			{
				number = checkNumber(10, lastNumber, number);
				lastNumber = 10;
				break;
			}
			if (roman.contains("V"))
			{
				number = checkNumber(5, lastNumber, number);
				lastNumber = 5;
				break;
			}
			if (roman.contains("I"))
			{
				number = checkNumber(1, lastNumber, number);
				lastNumber = 1;
				break;
			}
		 }	
		 return number;
	}
	
	public static int checkNumber(int num, int lastNumber, int lastNum) 
	{
        if (lastNum > num) 
        {
            return lastNum - num;
        } 
        else 
        {
            return lastNum + num;
        }
	}

	public String toString()
	{
		String output = "";
		for (int i = 0; i < NUMBERS.length; i++)
		{
			while (number >= NUMBERS[i])
			{
				output = output + LETTERS[i];
				number -= NUMBERS[i];
			}
		}
		
		return output + "\n";
	}
}